import numpy as np
from qiskit.quantum_info import Statevector

def correct_task_1(ansatz_func):


   qubits1=4
   reps1=1
   params1 = np.array([0.01989393, 3.22046644, 5.99687252, 1.06764432, 4.65024655,
       0.7300127 , 2.23354126, 2.98106778, 0.51749553, 5.65997258,
       6.18065671, 6.01111523, 5.14879223, 4.1128221 , 1.87916518,
       5.13474191])
    
   Correct_Statevector1 = np.array([-0.00670497-3.46562878e-03j, -0.00892036-6.87670848e-04j,
       -0.09729364+1.62835191e-02j, -0.00784072+2.28831600e-02j,
       -0.00264948-1.14223694e-01j, -0.02762686-1.14011468e-02j,
       -0.28508272+2.16931798e-01j,  0.01986851+9.29467582e-02j,
        0.00828157-1.30065423e-02j,  0.00084976-8.55858590e-03j,
       -0.02068916-7.23882382e-02j, -0.01778558-3.28118350e-03j,
        0.2234028 +1.51955766e-01j,  0.06006536-3.68510706e-02j,
       -0.02198454-8.38966131e-01j, -0.20403111-8.93623507e-02j])

   ansatz1=ansatz_func(num_qubits=qubits1, reps=reps1)
   state1=Statevector(ansatz1.assign_parameters(params1)).data
   assert ansatz1.num_parameters == 2 * qubits1 * (reps1 + 1), f"Number of parameters is incorrect."
   assert np.allclose(state1, Correct_Statevector1, atol=1e-3), f"Statevector is incorrect."

   qubits2=5
   reps2=2
   params2= np.array([5.18694332, 3.38607132, 3.31538859, 3.84886393, 4.56030935,
      2.2169817 , 2.19192983, 3.08929085, 5.95486648, 3.61159831,
      1.69507837, 5.63568982, 5.73765058, 5.98644772, 5.82582477,
      3.4946908 , 6.0254116 , 3.97204267, 5.09743798, 0.05005229,
      3.62692755, 1.00697553, 5.19366771, 1.79873894, 3.01462992,
      5.98502779, 4.83977036, 5.69416171, 5.10743454, 5.22805036])

   correct_statevector2 = np.array([ 0.09631101+0.18911719j,  0.14813171+0.16671118j,
      0.16914866+0.10118381j,  0.23853285+0.0218982j ,
      -0.13303787-0.11957292j,  0.11122845+0.08233605j,
      -0.14263565-0.00286098j, -0.05354708+0.08161666j,
      -0.21084574+0.01798862j, -0.09369466-0.04103197j,
      -0.00771771+0.25800012j,  0.12280169+0.2059463j ,
      0.09162496-0.06387034j, -0.11122884-0.09845426j,
      -0.06162075-0.03995566j,  0.04982139+0.00561532j,
      -0.13539969+0.09682248j, -0.18375645+0.05238847j,
      -0.11991487+0.10079347j, -0.07276138+0.13156673j,
      0.09846506-0.05191775j, -0.20281439+0.0360524j ,
      0.08480684-0.14016238j, -0.13102394-0.1625349j ,
      0.03621405-0.12532509j,  0.08996204+0.09608516j,
      -0.16988128-0.01939904j, -0.20285542+0.04264453j,
      0.04769235+0.02477206j,  0.23866194+0.08819782j,
      -0.02728108-0.18042273j, -0.24839256+0.01953759j])

   ansatz2=ansatz_func(num_qubits=qubits2, reps=reps2)
   state2=Statevector(ansatz2.assign_parameters(params2)).data
   assert ansatz2.num_parameters == 2 * qubits2 * (reps2 + 1), f"Number of parameters is incorrect."
   assert np.allclose(state2, correct_statevector2, atol=1e-3), f"Statevector is incorrect."

   return print("Task 1 is correct")